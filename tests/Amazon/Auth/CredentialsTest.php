<?php
namespace Amazon\Auth;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-09 at 16:47:39.
 */
class CredentialsTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Credentials
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Credentials;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testGetAuthKeyWhenUndefined()
    {
        $this->setExpectedException('UnexpectedValueException');

        $value = $this->object->getAuthKey();
    }

    public function testSetAuthKey()
    {
        $this->assertAttributeEmpty('auth_key', $this->object);

        $auth_key = sha1(microtime());

        $this->object->setAuthKey($auth_key);

        $this->assertAttributeEquals($auth_key, 'auth_key', $this->object);

        return $auth_key;
    }

    public function testGetAuthKey()
    {
        $auth_key = $this->testSetAuthKey();

        $this->assertSame($auth_key, $this->object->getAuthKey());
    }

    public function testSetSecret()
    {
        $secret = sha1(microtime());

        $this->assertAttributeEmpty('secret', $this->object);
        $this->object->setSecret($secret);

        $this->assertAttributeEquals($secret, 'secret', $this->object);
    }

    public function testGetAuthHeader()
    {
        $secret = sha1(microtime());
        $nonce = sha1($secret);
        $auth_key = sha1($nonce);

        $this->object->setAuthKey($auth_key);
        $this->object->setSecret($secret);

        $signature = base64_encode(
            hash_hmac(
                'sha256',
                $nonce,
                $secret,
                true
            )
        );

        $auth_header = sprintf('AWS3-HTTPS AWSAccessKeyId=%s,Algorithm=HmacSHA256,Signature=%s', $auth_key, $signature);

        $this->assertAttributeEquals($auth_key, 'auth_key', $this->object);
        $this->assertAttributeEquals($secret, 'secret', $this->object);
        $this->assertSame($auth_header, $this->object->getAuthHeader($nonce));
    }

    public function testGetSignature()
    {
        $secret = sha1(microtime());
        $nonce = sha1($secret);

        $this->object->setSecret($secret);

        $signature = base64_encode(
            hash_hmac(
                'sha256',
                $nonce,
                $secret,
                true
            )
        );

        $this->assertSame($signature, $this->object->getSignature($nonce));
    }

    public function testGetSignatureWithNoSecret()
    {
        $nonce = sha1(microtime());

        $this->setExpectedException('\RuntimeException');

        $this->object->getSignature($nonce);
    }
}
