<?php
namespace Amazon;

use \Mockery AS M;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-09 at 16:47:40.
 */
class RequestTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Request
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Request;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        M::close();
    }

    public function testSetUserAgent()
    {
        $this->object->setUserAgent('foo');

        $this->assertAttributeSame('foo', 'user_agent', $this->object);
    }

    public function testSetCredentials()
    {
        $credentials = M::mock('\Amazon\CredentialsInterface');

        $this->object->setCredentials($credentials);

        $this->assertAttributeSame($credentials, 'credentials', $this->object);
    }

    public function testSetAction()
    {
        $action = sha1(microtime());

        $this->object->setAction($action);

        $this->assertAttributeSame($action, 'action', $this->object);
    }

    public function testSetHost()
    {
        $host = sha1(microtime());

        $this->object->setHost($host);

        $this->assertAttributeSame($host, 'host', $this->object);
    }

    public function testSetPath()
    {
        $path = sha1(microtime());

        $this->object->setPath($path);

        $this->assertAttributeSame($path, 'path', $this->object);
    }

    public function testGetResponseNoAction()
    {
        $this->setExpectedException('\RuntimeException');
        $this->object->getResponse();
    }

    public function testGetResponseNoHost()
    {
        $this->object->setAction(sha1(microtime()));

        $this->setExpectedException('\RuntimeException');
        $this->object->getResponse();
    }

    public function testGetResponseNoCredentials()
    {
        $action = sha1(microtime());
        $host = sha1($action);
        $this->object->setAction($action);
        $this->object->setHost($host);

        $this->setExpectedException('\RuntimeException');
        $this->object->getResponse();
    }

    public function testGetResponseUnknownMethod()
    {
        $action = sha1(microtime());
        $host = sha1($action);
        $this->object->setAction($action);
        $this->object->setHost($host);

        $credentials = M::mock('\Amazon\CredentialsInterface');

        $credentials->shouldReceive('getAuthHeader')->with(M::any())->andReturn(sha1(microtime()));

        $this->object->setCredentials($credentials);
        $this->setExpectedException('\RuntimeException');
        $this->object->getResponse();
    }

    public function testGetResponseUnimplementedMethod()
    {
        $action = sha1(microtime());
        $host = sha1($action);
        $this->object->setAction($action);
        $this->object->setHost($host);

        $credentials = M::mock('\Amazon\CredentialsInterface');

        $credentials->shouldReceive('getAuthHeader')->with(M::any())->andReturn(sha1(microtime()));

        $this->object->setCredentials($credentials);
        $this->object->setMethod(Request::METHOD_TRACE);

        $this->setExpectedException('\RuntimeException');
        $this->object->getResponse();
    }

    public function testGetResponseFailureGet()
    {
        $action = sha1(microtime());
        $host = sha1($action);
        $this->object->setAction($action);
        $this->object->setHost($host);

        $credentials = M::mock('\Amazon\CredentialsInterface');

        $credentials->shouldReceive('getAuthHeader')->with(M::any())->andReturn(sha1(microtime()));

        $this->object->setCredentials($credentials);
        $this->object->setMethod(Request::METHOD_GET);

        $this->setExpectedException('\RuntimeException', 'Could not connect to given URL');
        $this->object->getResponse();
    }

    public function testGetResponseFailureGetWithParams()
    {
        $this->object->addParameter('foo', 'bar');
        $action = sha1(microtime());
        $host = sha1($action);
        $this->object->setAction($action);
        $this->object->setHost($host);

        $credentials = M::mock('\Amazon\CredentialsInterface');

        $credentials->shouldReceive('getAuthHeader')->with(M::any())->andReturn(sha1(microtime()));

        $this->object->setCredentials($credentials);
        $this->object->setMethod(Request::METHOD_GET);

        $this->setExpectedException('\RuntimeException', 'Could not connect to given URL');
        $this->object->getResponse();

        $this->assertSame($path . '?foo=bar', $this->object->getPath());
    }

    public function testGetResponseFailureGetWithParamsArray()
    {
        $this->object->addParameter('foo', array('bar', 'baz'));
        $action = sha1(microtime());
        $host = sha1($action);
        $this->object->setAction($action);
        $this->object->setHost($host);

        $credentials = M::mock('\Amazon\CredentialsInterface');

        $credentials->shouldReceive('getAuthHeader')->with(M::any())->andReturn(sha1(microtime()));

        $this->object->setCredentials($credentials);
        $this->object->setMethod(Request::METHOD_GET);

        $this->setExpectedException('\RuntimeException', 'Could not connect to given URL');
        $this->object->getResponse();
    }

    public function testAddParameter()
    {
        $this->assertAttributeInternalType('array', 'params', $this->object);
        $this->assertAttributeEmpty('params', $this->object);

        $key = sha1(microtime());
        $val = sha1($key);

        $arr = array(
            $key => $val
        );

        $this->object->addParameter($key, $val);

        $this->assertAttributeSame($arr, 'params', $this->object);

        $arr = array(
            $key => array(
                $val,
                sha1($val)
            )
        );
        $this->object->addParameter($key, sha1($val));

        $this->assertAttributeSame($arr, 'params', $this->object);

        $arr[$key][] = sha1(sha1($val));

        $this->object->addParameter($key, sha1(sha1($val)));

        $this->assertAttributeSame($arr, 'params', $this->object);

    }

    public function testSetParameters()
    {
        $this->assertAttributeInternalType('array', 'params', $this->object);
        $this->assertAttributeEmpty('params', $this->object);

        $arr = array(
            'foo' => 'bar'
        );

        $this->object->setParameters($arr);

        $this->assertAttributeSame($arr, 'params', $this->object);
    }

    public function testGetUrl()
    {
        $host = sha1(microtime());
        $path = sha1($host);

        $this->object->setHost($host);
        $this->object->setPath($path);

        $this->assertSame('https://' . $host . '/' . $path, $this->object->getUrl());
    }

    public function testSetMethod()
    {
        $method = sha1(microtime());

        $this->object->setMethod($method);
        $this->assertAttributeSame($method, 'method', $this->object);
    }
}
