<?php
namespace Amazon\SES;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-09 at 16:47:39.
 */
class MessageTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Message
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Message;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testAddTo()
    {
        $to = sha1(microtime());

        $this->object->addTo($to);

        $this->assertAttributeSame(array($to), 'to', $this->object);
    }

    public function testAddToMulti()
    {
        $to = array();
        $to[] = sha1(microtime());
        $to[] = sha1($to[0]);

        $this->object->addTo($to);

        $this->assertAttributeSame($to, 'to', $this->object);
    }


    public function testSetTo()
    {
        $to = sha1(microtime());

        $this->object->setTo($to);

        $this->assertAttributeSame(array($to), 'to', $this->object);
    }

    public function testSetToMulti()
    {
        $to = array();
        $to[] = sha1(microtime());
        $to[] = sha1($to[0]);

        $this->object->setTo($to);

        $this->assertAttributeSame($to, 'to', $this->object);
    }

    /**
     * @depends testSetTo
     */
    public function testGetTo()
    {
        $to = sha1(microtime());
        $this->object->setTo($to);

        $this->assertSame(array($to), $this->object->getTo());
    }

    public function testAddCc()
    {
        $cc = sha1(microtime());

        $this->object->addCc($cc);

        $this->assertAttributeSame(array($cc), 'cc', $this->object);
    }

    public function testAddCcMulti()
    {
        $cc = array();
        $cc[] = sha1(microtime());
        $cc[] = sha1($cc[0]);

        $this->object->addCc($cc);

        $this->assertAttributeSame($cc, 'cc', $this->object);
    }


    public function testSetCc()
    {
        $cc = sha1(microtime());

        $this->object->setCc($cc);

        $this->assertAttributeSame(array($cc), 'cc', $this->object);
    }

    public function testSetCcMulti()
    {
        $cc = array();
        $cc[] = sha1(microtime());
        $cc[] = sha1($cc[0]);

        $this->object->setCc($cc);

        $this->assertAttributeSame($cc, 'cc', $this->object);
    }

    /**
     * @depends testSetCc
     */
    public function testGetCc()
    {
        $cc = sha1(microtime());
        $this->object->setCc($cc);

        $this->assertSame(array($cc), $this->object->getCc());
    }

    public function testAddBcc()
    {
        $bcc = sha1(microtime());

        $this->object->addBcc($bcc);

        $this->assertAttributeSame(array($bcc), 'bcc', $this->object);
    }

    public function testAddBccMulti()
    {
        $bcc = array();
        $bcc[] = sha1(microtime());
        $bcc[] = sha1($bcc[0]);

        $this->object->addBcc($bcc);

        $this->assertAttributeSame($bcc, 'bcc', $this->object);
    }


    public function testSetBcc()
    {
        $bcc = sha1(microtime());

        $this->object->setBcc($bcc);

        $this->assertAttributeSame(array($bcc), 'bcc', $this->object);
    }

    public function testSetBccMulti()
    {
        $bcc = array();
        $bcc[] = sha1(microtime());
        $bcc[] = sha1($bcc[0]);

        $this->object->setBcc($bcc);

        $this->assertAttributeSame($bcc, 'bcc', $this->object);
    }

    /**
     * @depends testSetBcc
     */
    public function testGetBcc()
    {
        $bcc = sha1(microtime());
        $this->object->setBcc($bcc);

        $this->assertSame(array($bcc), $this->object->getBcc());
    }

    public function testAddReplyTo()
    {
        $reply_to = sha1(microtime());

        $this->object->addReplyTo($reply_to);

        $this->assertAttributeSame(array($reply_to), 'reply_to', $this->object);
    }

    public function testAddReplyToMulti()
    {
        $reply_to = array();
        $reply_to[] = sha1(microtime());
        $reply_to[] = sha1($reply_to[0]);

        $this->object->addReplyTo($reply_to);

        $this->assertAttributeSame($reply_to, 'reply_to', $this->object);
    }


    public function testSetReplyTo()
    {
        $reply_to = sha1(microtime());

        $this->object->setReplyTo($reply_to);

        $this->assertAttributeSame(array($reply_to), 'reply_to', $this->object);
    }

    public function testSetReplyToMulti()
    {
        $reply_to = array();
        $reply_to[] = sha1(microtime());
        $reply_to[] = sha1($reply_to[0]);

        $this->object->setReplyTo($reply_to);

        $this->assertAttributeSame($reply_to, 'reply_to', $this->object);
    }

    /**
     * @depends testSetReplyTo
     */
    public function testGetReplyTo()
    {
        $reply_to = sha1(microtime());
        $this->object->setReplyTo($reply_to);

        $this->assertSame(array($reply_to), $this->object->getReplyTo());
    }

    public function testSetFrom()
    {
        $this->object->setFrom('foo', 'bar');

        $this->assertAttributeSame('"foo" <bar>', 'from', $this->object);
    }

    public function testGetFrom()
    {
        $this->object->setFrom('foo', 'bar');

        $this->assertSame('"foo" <bar>', $this->object->getFrom());
    }

    public function testSetReturnPath()
    {
        $return_path = sha1(microtime());

        $this->object->setReturnPath($return_path);
        $this->assertAttributeSame($return_path, 'return_path', $this->object);
    }

    /**
     * @depends testSetReturnPath
     */
    public function testGetReturnPath()
    {
        $return_path = sha1(microtime());

        $this->object->setReturnPath($return_path);
        $this->assertSame($return_path, $this->object->getReturnPath());
    }

    /**
     * @depends testSetReturnPath
     */
    public function testHasReturnPath()
    {
        $this->assertFalse($this->object->hasReturnPath());

        $this->object->setReturnPath('');
        $this->assertFalse($this->object->hasReturnPath());

        $this->object->setReturnPath(null);
        $this->assertFalse($this->object->hasReturnPath());

        $this->object->setReturnPath('test');
        $this->assertTrue($this->object->hasReturnPath());
    }

    public function testSetSubject()
    {
        $subject = sha1(microtime());

        $this->object->setSubject($subject);
        $this->assertAttributeSame($subject, 'subject', $this->object);
    }

    /**
     * @depends testSetSubject
     */
    public function testGetSubject()
    {
        $subject = sha1(microtime());

        $this->object->setSubject($subject);
        $this->assertSame($subject, $this->object->getSubject());
    }

    /**
     * @depends testSetSubject
     */
    public function testHasSubject()
    {
        $this->assertFalse($this->object->hasSubject());

        $this->object->setSubject('');
        $this->assertFalse($this->object->hasSubject());

        $this->object->setSubject(null);
        $this->assertFalse($this->object->hasSubject());

        $this->object->setSubject('test');
        $this->assertTrue($this->object->hasSubject());
    }

    public function testSetBodyText()
    {
        $body_text = sha1(microtime());

        $this->object->setBodyText($body_text);
        $this->assertAttributeSame($body_text, 'body_text', $this->object);
    }

    /**
     * @depends testSetBodyText
     */
    public function testGetBodyText()
    {
        $body_text = sha1(microtime());

        $this->object->setBodyText($body_text);
        $this->assertSame($body_text, $this->object->getBodyText());
    }

    /**
     * @depends testSetBodyText
     */
    public function testHasBodyText()
    {
        $this->assertFalse($this->object->hasBodyText());

        $this->object->setBodyText('');
        $this->assertFalse($this->object->hasBodyText());

        $this->object->setBodyText(null);
        $this->assertFalse($this->object->hasBodyText());

        $this->object->setBodyText('test');
        $this->assertTrue($this->object->hasBodyText());
    }

    public function testSetBodyHtml()
    {
        $body_html = sha1(microtime());

        $this->object->setBodyHtml($body_html);
        $this->assertAttributeSame($body_html, 'body_html', $this->object);
    }

    /**
     * @depends testSetBodyHtml
     */
    public function testGetBodyHtml()
    {
        $body_html = sha1(microtime());

        $this->object->setBodyHtml($body_html);
        $this->assertSame($body_html, $this->object->getBodyHtml());
    }

    /**
     * @depends testSetBodyHtml
     */
    public function testHasBodyHtml()
    {
        $this->assertFalse($this->object->hasBodyHtml());

        $this->object->setBodyHtml('');
        $this->assertFalse($this->object->hasBodyHtml());

        $this->object->setBodyHtml(null);
        $this->assertFalse($this->object->hasBodyHtml());

        $this->object->setBodyHtml('test');
        $this->assertTrue($this->object->hasBodyHtml());
    }

    public function testSetCharsetSubject()
    {
        $this->object->setCharsetSubjecT('ISO-8859-1');
        $this->assertAttributeSame('ISO-8859-1', 'charset_subject', $this->object);
    }

    /**
     * @depends testSetCharsetSubject
     */
    public function testGetCharsetSubject()
    {
        $this->assertSame('UTF-8', $this->object->getCharsetSubject());

        $this->object->setCharsetSubject('ISO-8859-1');

        $this->assertSame('ISO-8859-1', $this->object->getCharsetSubject());
    }

    public function testSetCharsetBodyText()
    {
        $this->object->setCharsetBodyText('ISO-8859-1');
        $this->assertAttributeSame('ISO-8859-1', 'charset_body_text', $this->object);
    }

    /**
     * @depends testSetCharsetBodyText
     */
    public function testGetCharsetBodyText()
    {
        $this->assertSame('UTF-8', $this->object->getCharsetBodyText());

        $this->object->setCharsetBodyText('ISO-8859-1');

        $this->assertSame('ISO-8859-1', $this->object->getCharsetBodyText());
    }

    public function testSetCharsetBodyHtml()
    {
        $this->object->setCharsetBodyHtml('ISO-8859-1');
        $this->assertAttributeSame('ISO-8859-1', 'charset_body_html', $this->object);
    }

    /**
     * @depends testSetCharsetBodyHtml
     */
    public function testGetCharsetBodyHtml()
    {
        $this->assertSame('UTF-8', $this->object->getCharsetBodyHtml());

        $this->object->setCharsetBodyHtml('ISO-8859-1');

        $this->assertSame('ISO-8859-1', $this->object->getCharsetBodyHtml());
    }

    public function testIsValid()
    {
        $this->assertFalse($this->object->isValid());
        $this->object->setTo(sha1(microtime()));
        $this->assertFalse($this->object->isValid());
        $this->object->setFrom(sha1(microtime()), sha1(microtime()));
        $this->assertFalse($this->object->isValid());
        $this->object->setSubject(sha1(microtime()));
        $this->assertTrue($this->object->isValid());
        $this->object->setBodyHtml(sha1(microtime()));
        $this->assertTrue($this->object->isValid());
        $this->object->setBodyText(sha1(microtime()));
        $this->assertTrue($this->object->isValid());
    }
}
